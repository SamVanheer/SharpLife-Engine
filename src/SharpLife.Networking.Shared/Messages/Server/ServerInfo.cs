// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ServerInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SharpLife.Networking.Shared.Messages.Server {

  /// <summary>Holder for reflection information generated from ServerInfo.proto</summary>
  public static partial class ServerInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for ServerInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServerInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBTZXJ2ZXJJbmZvLnByb3RvEitTaGFycExpZmUuTmV0d29ya2luZy5TaGFy",
            "ZWQuTWVzc2FnZXMuU2VydmVyIswBCgpTZXJ2ZXJJbmZvEhgKEHByb3RvY29s",
            "X3ZlcnNpb24YASABKA0SEwoLc3Bhd25fY291bnQYAiABKAUSDwoHbWFwX2Ny",
            "YxgDIAEoDRIWCg5jbGllbnRfZGxsX21kNRgEIAEoDBITCgttYXhfY2xpZW50",
            "cxgFIAEoDRIRCglnYW1lX25hbWUYBiABKAkSEQoJaG9zdF9uYW1lGAcgASgJ",
            "EhUKDW1hcF9maWxlX25hbWUYCCABKAkSFAoMYWxsb3dfY2hlYXRzGAkgASgI",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SharpLife.Networking.Shared.Messages.Server.ServerInfo), global::SharpLife.Networking.Shared.Messages.Server.ServerInfo.Parser, new[]{ "ProtocolVersion", "SpawnCount", "MapCrc", "ClientDllMd5", "MaxClients", "GameName", "HostName", "MapFileName", "AllowCheats" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Information about the server that the client needs to know
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SharpLife.Networking.Shared.Messages.Server.ServerInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      protocolVersion_ = other.protocolVersion_;
      spawnCount_ = other.spawnCount_;
      mapCrc_ = other.mapCrc_;
      clientDllMd5_ = other.clientDllMd5_;
      maxClients_ = other.maxClients_;
      gameName_ = other.gameName_;
      hostName_ = other.hostName_;
      mapFileName_ = other.mapFileName_;
      allowCheats_ = other.allowCheats_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 1;
    private uint protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "spawn_count" field.</summary>
    public const int SpawnCountFieldNumber = 2;
    private int spawnCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnCount {
      get { return spawnCount_; }
      set {
        spawnCount_ = value;
      }
    }

    /// <summary>Field number for the "map_crc" field.</summary>
    public const int MapCrcFieldNumber = 3;
    private uint mapCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapCrc {
      get { return mapCrc_; }
      set {
        mapCrc_ = value;
      }
    }

    /// <summary>Field number for the "client_dll_md5" field.</summary>
    public const int ClientDllMd5FieldNumber = 4;
    private pb::ByteString clientDllMd5_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClientDllMd5 {
      get { return clientDllMd5_; }
      set {
        clientDllMd5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_clients" field.</summary>
    public const int MaxClientsFieldNumber = 5;
    private uint maxClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxClients {
      get { return maxClients_; }
      set {
        maxClients_ = value;
      }
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 6;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 7;
    private string hostName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_file_name" field.</summary>
    public const int MapFileNameFieldNumber = 8;
    private string mapFileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapFileName {
      get { return mapFileName_; }
      set {
        mapFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allow_cheats" field.</summary>
    public const int AllowCheatsFieldNumber = 9;
    private bool allowCheats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCheats {
      get { return allowCheats_; }
      set {
        allowCheats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (SpawnCount != other.SpawnCount) return false;
      if (MapCrc != other.MapCrc) return false;
      if (ClientDllMd5 != other.ClientDllMd5) return false;
      if (MaxClients != other.MaxClients) return false;
      if (GameName != other.GameName) return false;
      if (HostName != other.HostName) return false;
      if (MapFileName != other.MapFileName) return false;
      if (AllowCheats != other.AllowCheats) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (SpawnCount != 0) hash ^= SpawnCount.GetHashCode();
      if (MapCrc != 0) hash ^= MapCrc.GetHashCode();
      if (ClientDllMd5.Length != 0) hash ^= ClientDllMd5.GetHashCode();
      if (MaxClients != 0) hash ^= MaxClients.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (MapFileName.Length != 0) hash ^= MapFileName.GetHashCode();
      if (AllowCheats != false) hash ^= AllowCheats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtocolVersion != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ProtocolVersion);
      }
      if (SpawnCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SpawnCount);
      }
      if (MapCrc != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MapCrc);
      }
      if (ClientDllMd5.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ClientDllMd5);
      }
      if (MaxClients != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxClients);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GameName);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HostName);
      }
      if (MapFileName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MapFileName);
      }
      if (AllowCheats != false) {
        output.WriteRawTag(72);
        output.WriteBool(AllowCheats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProtocolVersion);
      }
      if (SpawnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnCount);
      }
      if (MapCrc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapCrc);
      }
      if (ClientDllMd5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientDllMd5);
      }
      if (MaxClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxClients);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (MapFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapFileName);
      }
      if (AllowCheats != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.SpawnCount != 0) {
        SpawnCount = other.SpawnCount;
      }
      if (other.MapCrc != 0) {
        MapCrc = other.MapCrc;
      }
      if (other.ClientDllMd5.Length != 0) {
        ClientDllMd5 = other.ClientDllMd5;
      }
      if (other.MaxClients != 0) {
        MaxClients = other.MaxClients;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.MapFileName.Length != 0) {
        MapFileName = other.MapFileName;
      }
      if (other.AllowCheats != false) {
        AllowCheats = other.AllowCheats;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtocolVersion = input.ReadUInt32();
            break;
          }
          case 16: {
            SpawnCount = input.ReadInt32();
            break;
          }
          case 24: {
            MapCrc = input.ReadUInt32();
            break;
          }
          case 34: {
            ClientDllMd5 = input.ReadBytes();
            break;
          }
          case 40: {
            MaxClients = input.ReadUInt32();
            break;
          }
          case 50: {
            GameName = input.ReadString();
            break;
          }
          case 58: {
            HostName = input.ReadString();
            break;
          }
          case 66: {
            MapFileName = input.ReadString();
            break;
          }
          case 72: {
            AllowCheats = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
