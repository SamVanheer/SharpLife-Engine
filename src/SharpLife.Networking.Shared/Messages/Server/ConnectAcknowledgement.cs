// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ConnectAcknowledgement.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SharpLife.Networking.Shared.Messages.Server {

  /// <summary>Holder for reflection information generated from ConnectAcknowledgement.proto</summary>
  public static partial class ConnectAcknowledgementReflection {

    #region Descriptor
    /// <summary>File descriptor for ConnectAcknowledgement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConnectAcknowledgementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxDb25uZWN0QWNrbm93bGVkZ2VtZW50LnByb3RvEitTaGFycExpZmUuTmV0",
            "d29ya2luZy5TaGFyZWQuTWVzc2FnZXMuU2VydmVyImgKFkNvbm5lY3RBY2tu",
            "b3dsZWRnZW1lbnQSDwoHdXNlcl9pZBgBIAEoBRIUCgx0cnVlX2FkZHJlc3MY",
            "AiABKAkSEQoJaXNfc2VjdXJlGAMgASgIEhQKDGJ1aWxkX251bWJlchgEIAEo",
            "BWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SharpLife.Networking.Shared.Messages.Server.ConnectAcknowledgement), global::SharpLife.Networking.Shared.Messages.Server.ConnectAcknowledgement.Parser, new[]{ "UserId", "TrueAddress", "IsSecure", "BuildNumber" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The first message sent from the server to the client, allowing the client to finish connecting
  /// </summary>
  public sealed partial class ConnectAcknowledgement : pb::IMessage<ConnectAcknowledgement> {
    private static readonly pb::MessageParser<ConnectAcknowledgement> _parser = new pb::MessageParser<ConnectAcknowledgement>(() => new ConnectAcknowledgement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectAcknowledgement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SharpLife.Networking.Shared.Messages.Server.ConnectAcknowledgementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectAcknowledgement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectAcknowledgement(ConnectAcknowledgement other) : this() {
      userId_ = other.userId_;
      trueAddress_ = other.trueAddress_;
      isSecure_ = other.isSecure_;
      buildNumber_ = other.buildNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectAcknowledgement Clone() {
      return new ConnectAcknowledgement(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private int userId_;
    /// <summary>
    ///The client's userid on the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "true_address" field.</summary>
    public const int TrueAddressFieldNumber = 2;
    private string trueAddress_ = "";
    /// <summary>
    ///The client's IP address as seen by the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrueAddress {
      get { return trueAddress_; }
      set {
        trueAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_secure" field.</summary>
    public const int IsSecureFieldNumber = 3;
    private bool isSecure_;
    /// <summary>
    ///Whether the server is running as VAC secure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSecure {
      get { return isSecure_; }
      set {
        isSecure_ = value;
      }
    }

    /// <summary>Field number for the "build_number" field.</summary>
    public const int BuildNumberFieldNumber = 4;
    private int buildNumber_;
    /// <summary>
    ///The server's build number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildNumber {
      get { return buildNumber_; }
      set {
        buildNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectAcknowledgement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectAcknowledgement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TrueAddress != other.TrueAddress) return false;
      if (IsSecure != other.IsSecure) return false;
      if (BuildNumber != other.BuildNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (TrueAddress.Length != 0) hash ^= TrueAddress.GetHashCode();
      if (IsSecure != false) hash ^= IsSecure.GetHashCode();
      if (BuildNumber != 0) hash ^= BuildNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UserId);
      }
      if (TrueAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TrueAddress);
      }
      if (IsSecure != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSecure);
      }
      if (BuildNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuildNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (TrueAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrueAddress);
      }
      if (IsSecure != false) {
        size += 1 + 1;
      }
      if (BuildNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectAcknowledgement other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.TrueAddress.Length != 0) {
        TrueAddress = other.TrueAddress;
      }
      if (other.IsSecure != false) {
        IsSecure = other.IsSecure;
      }
      if (other.BuildNumber != 0) {
        BuildNumber = other.BuildNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt32();
            break;
          }
          case 18: {
            TrueAddress = input.ReadString();
            break;
          }
          case 24: {
            IsSecure = input.ReadBool();
            break;
          }
          case 32: {
            BuildNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
