// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameServerInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SharpLife.Game.Shared.Networking.Messages.Server {

  /// <summary>Holder for reflection information generated from GameServerInfo.proto</summary>
  public static partial class GameServerInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for GameServerInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameServerInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRHYW1lU2VydmVySW5mby5wcm90bxIwU2hhcnBMaWZlLkdhbWUuU2hhcmVk",
            "Lk5ldHdvcmtpbmcuTWVzc2FnZXMuU2VydmVyIk4KDkdhbWVTZXJ2ZXJJbmZv",
            "EhUKDW1hcF9maWxlX25hbWUYASABKAkSDwoHbWFwX2NyYxgCIAEoDRIUCgxh",
            "bGxvd19jaGVhdHMYAyABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SharpLife.Game.Shared.Networking.Messages.Server.GameServerInfo), global::SharpLife.Game.Shared.Networking.Messages.Server.GameServerInfo.Parser, new[]{ "MapFileName", "MapCrc", "AllowCheats" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Information about the game server that the client needs to know
  /// </summary>
  public sealed partial class GameServerInfo : pb::IMessage<GameServerInfo> {
    private static readonly pb::MessageParser<GameServerInfo> _parser = new pb::MessageParser<GameServerInfo>(() => new GameServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SharpLife.Game.Shared.Networking.Messages.Server.GameServerInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo(GameServerInfo other) : this() {
      mapFileName_ = other.mapFileName_;
      mapCrc_ = other.mapCrc_;
      allowCheats_ = other.allowCheats_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo Clone() {
      return new GameServerInfo(this);
    }

    /// <summary>Field number for the "map_file_name" field.</summary>
    public const int MapFileNameFieldNumber = 1;
    private string mapFileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapFileName {
      get { return mapFileName_; }
      set {
        mapFileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_crc" field.</summary>
    public const int MapCrcFieldNumber = 2;
    private uint mapCrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapCrc {
      get { return mapCrc_; }
      set {
        mapCrc_ = value;
      }
    }

    /// <summary>Field number for the "allow_cheats" field.</summary>
    public const int AllowCheatsFieldNumber = 3;
    private bool allowCheats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowCheats {
      get { return allowCheats_; }
      set {
        allowCheats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapFileName != other.MapFileName) return false;
      if (MapCrc != other.MapCrc) return false;
      if (AllowCheats != other.AllowCheats) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapFileName.Length != 0) hash ^= MapFileName.GetHashCode();
      if (MapCrc != 0) hash ^= MapCrc.GetHashCode();
      if (AllowCheats != false) hash ^= AllowCheats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapFileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapFileName);
      }
      if (MapCrc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MapCrc);
      }
      if (AllowCheats != false) {
        output.WriteRawTag(24);
        output.WriteBool(AllowCheats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapFileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapFileName);
      }
      if (MapCrc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapCrc);
      }
      if (AllowCheats != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.MapFileName.Length != 0) {
        MapFileName = other.MapFileName;
      }
      if (other.MapCrc != 0) {
        MapCrc = other.MapCrc;
      }
      if (other.AllowCheats != false) {
        AllowCheats = other.AllowCheats;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapFileName = input.ReadString();
            break;
          }
          case 16: {
            MapCrc = input.ReadUInt32();
            break;
          }
          case 24: {
            AllowCheats = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
